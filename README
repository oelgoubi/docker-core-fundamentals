# Build an image after creating a Docker file
docker build -t image-name .

# run the container and create a volume ( Type : Bind Mount)
docker run -d -p 3000:3000 -v %cd%:/app -v /app/node_modules --name node-app node-app-image    # On CMD
docker run -v G:/DevWebCareer/LearningDocker:/app -v /app/node_modules -p 3000:3000 -d --name node-app node-app-image

# PWD : full path on GitBash : pwd -W

# NB IMPORTANT : add "nodemon -L server.js" because the flag -L is very Important : --legacy-watch or -L

# remove running container and the volume associated with it
docker rm <container-name> -fv

# Insect the conainer " mounts / networking "
docker inspect <container-name> 

# make a volume read only or write only by Adding the flag :ro or :wo 
# In the example below container can't write files in the host machine
docker run -d -p 3000:3000 -v %cd%:/app:ro -v /app/node_modules --name node-app node-app-image

# Add Env Variables in the Dockerfile 

# Add Env Var in the Run Time 
docker run -v %cd%:/app -v /app/node_modules --env PORT=4000 -p 3000:4000 -d --name node-app node-app-image


# Add Env Variables with .env file

# docker-compose.yml : to handle multiple services 
# Build the image and run the container ( but if the image exist he will use it directly ) learningdocker_node-app ( project dir + name of service)
# NB : we should force docker-compose to rebuild the image each time 
docker-compose up -d --build

docker-compose down -v

# NB : We don't use volumes in the production volumes ( Host can create to container but we can accespt the opposit)

# Run the ENV Version : 
$ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

# Run the Prod Version and force build:
$ docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build   # force build

# Connect to a mongo container ( mongo shell )
docker exec -it learningdocker_mongo_1 mongo -u othy -p pass

# Create volume for our mongodb to save data 